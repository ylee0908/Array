https://leetcode.com/problems/maximum-subarray/

class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        cur_sum = nums[0]
        max_sum = nums[0]
        if len(nums)==1:
            return nums[0]
        for i in range(1, len(nums)):
            cur_sum = max(nums[i], cur_sum + nums[i])
            max_sum = max(max_sum, cur_sum)
        return max_sum
        
  def maxSubArray(self, nums: List[int]) -> int:
        dp = [0]*len(nums)
        dp[0] = nums[0]
        for i in range(1, len(nums)):
            dp[i] = max(dp[i-1]+nums[i], nums[i])
        return max(dp)
        
Divide and Conquer

Divide and Conquer solution, the solution can lie entirely in left or in right or span in between.
When it spans in between, we can use principle of optimality. The middle sum can be broken into sum from middle-1 towards left, 
and sum from middle+1 towards an index <= high. Lets call these sums as lmax and rmax.
Now the maximum middle sum must be max(lmax,0)+max(rmax,0)+nums[mid].
Why? We have to include nums[mid]. Now the left sum or right sum will only be included if the sum is positive.
class Solution(object):
    def maxSubArray(self, nums):
        return self.helper(nums, 0, len(nums)-1)
    
    def helper(self, nums, low, high):
        if low > high:
            return 0
        if low == high:
            return nums[low]
        mid = low + (high-low)//2
        x_left = self.helper(nums, low, mid)
        x_right = self.helper(nums, mid+1, high)
        lmax, rmax = float('-inf'), float('-inf')
        lsum, rsum = 0,0
        for i in range(mid-1, low-1, -1): ### Important Insight in NlgN solutions
            lsum = lsum + nums[i]
            lmax = max(lmax, lsum)
        for i in range(mid+1, high+1, 1):
            rsum = rsum + nums[i]
            rmax = max(rmax, rsum)
        return max(x_left, x_right, max(0,lmax)+max(0,rmax)+nums[mid])        
