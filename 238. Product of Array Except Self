https://leetcode.com/problems/product-of-array-except-self/

class Solution:
    #O(n) space and time
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        left = [1] * len(nums)
        for i in range(1, len(nums)):
            left[i] = left[i-1] * nums[i-1]
        
        right = [1] * len(nums)
        for i in reversed(range(len(nums)-1)):
            right[i] = right[i+1] * nums[i+1]
            
        res = [i] * len(nums)
        for i in range(len(nums)):
            res[i] = left[i] * right[i]
        return res
        
   #0(n) time complexity, O(1) space complexity    
   def productExceptSelf(self, nums: List[int]) -> List[int]:
        res = [0] * len(nums)
        res[0] = 1
        for i in range(1, len(nums)):
            res[i] = nums[i-1] * res[i-1]
            
        r = 1
        for i in reversed(range(len(nums))):
            res[i] = res[i] * r
            r *= nums[i]
            
        return res
